# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iousSw0kNxCBW63eUB6HDcpBc9jrhLxQ
"""

import gradio as gr
import torch
from transformers import AutoTokenizer,AutoModelForCausalLM

#load model and tokenizer
model_name="ibm-granite/granite-embedding-english-r2"
tokenizer = AutoTokenizer.form_pretrained(model_name)
model = AutoModelForCausalLM.form_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.floart32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
  tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt,max_length=512):
  inputs = tokenizer(prompt, return_tensors="pt",turncation=true,max_length=512)

  if torch.cuda.is_available():
    inputs = {k: v.to(model.device) for k, v in inputs.items()}

  with torch.no_grad():
    outputs = model.generate(
        **inputs,
        max_length=max_length,
        temperature=0.7,
        do-sample=True,
        pad_token_id=tokenizer.eos_token_id
    )

    response = tokenizer.decode(outputs[0],skip_special_tokens=True)
    response = response.replace(prompt,"").strip()
    return response

def concept_explanation(concept):
  prompt = f"Explain the concept of {concept} in detail with example:"
  return generate_response(prompt,max_length=800)

def quiz_generator(concept):
  prompt = f"Generate 5 quiz questions about {concept} with deifferent question tpye(multiple choice,true/false,short answer).At the end, provide all the answerrs in a separate ANSWERS section:"
  return generate_response(prompt,max_length=1000)

# Create Gradio interface
with gr.blocks() as app:
  gr.Markdown("#Educational AI Assistant")

  with gr.Tabs():
    with gr.TabItem("concept Explanation"):
      concept_input = gr.Textbox(label="Enter a concept",placeholder="e.g., machine learning")
      explain_btn = gr.Button("Explain")
      explanation_output = gr.Textbox(label="Explanation", lines=10)

      explain_btn.click(concept_explanation,inputs=concept_input, outputs=explanation_output)

    with gr.TabItem("Quiz Generator"):
      quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
      quiz_btn = gr.Button("Genrate Quiz")
      quiz_output = gr.Textbox(label="Quiz", lines=10)

      quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

app.launch(debug=True)

